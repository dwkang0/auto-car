void dijkstra_first(input * data){
    int (* v_xy)[2]=(int (*)[2])data->data_v;
    int (* car_road)[2]=(int (*)[2])data->data_c;
    int V=data->V;  int C=data->C;
    float * speed=data->c_speed;
    double roadtotal[V];     int check[V];     int link[V];
    priority_queue<edge> road_t_q;      edge road_t;
    double traffic[V][V];
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            traffic[i][j]=0.0;
        }
    }

    for(int car_n=0;car_n<C;car_n++){
        for(int i=0;i<V;i++){
            roadtotal[i]=INF;
            check[i]=0;
            link[i]=-1;
        }
        roadtotal[car_road[car_n][0]]=0;
        road_t_q.push(edge(car_road[car_n][0], 0));
        link[car_road[car_n][0]]=car_road[car_n][0];
        int u;
        while(!road_t_q.empty()){
            road_t=road_t_q.top(); road_t_q.pop();
            u=road_t.to;
            if(u==car_road[car_n][1]){
                break;
            }
            if(check[u]==0){
                for(int i=0; i<data->g[u].size(); i++){
                    int v=data->g[u][i].to; double h;
                    if(check[v]==0){
                        if(roadtotal[u]<roadtotal[v]-data->g[u][i].len){
                            roadtotal[v]=roadtotal[u]+data->g[u][i].len;
                            h=sqrt(pow((v_xy[v][0]-v_xy[car_road[car_n][1]][0]), 2)+pow((v_xy[v][1]-v_xy[car_road[car_n][1]][1]), 2));
                            road_t_q.push(edge(v, roadtotal[v]+h));
                            link[v]=u;
                        }
                    }
                }
                check[u]=1;
            }
        }
        ClearQueue(road_t_q);

        int data_link[V];
        for(int i=0;i<V;i++){
            data_link[i]=-1;
        }
        data_link[0]=car_road[car_n][1];
        int linking=V;
        for(int i=1;i<V;i++){
            data_link[i]=link[data_link[i-1]];
            if(data_link[i]==car_road[car_n][0]){
                linking=i+1;
                break;
            }
        }
        int car_link[linking];
        for(int i=0;i<linking;i++){
            car_link[linking-i-1]=data_link[i];
        }
        for(int i=0;i<linking-1;i++){
            traffic[car_link[i]][car_link[i+1]]+=1;
            for(int j=0;j<V;j++){
                if(j!=car_link[i+1]){
                    traffic[j][car_link[i]]+=(1.0/(double)(data->g[i].size()));
                }
                if(j!=car_link[i]){
                    traffic[car_link[i+1]][j]+=(1.0/(double)(data->g[i+1].size()));
                }
            }
        }
    }
    for(int i=0;i<V;i++){
        for(int j=0;j<data->g[i].size();j++){
            int k=data->g[i][j].to;
            printf("%d -> %d : %f\n", i, k, traffic[i][k]);
        }
    }

    for(int car_n=0;car_n<C;car_n++){
        for(int i=0;i<V;i++){
            roadtotal[i]=INF;
            check[i]=0;
            link[i]=-1;
        }
        roadtotal[car_road[car_n][0]]=0;
        road_t_q.push(edge(car_road[car_n][0], 0));
        link[car_road[car_n][0]]=car_road[car_n][0];
        int u;
        while(!road_t_q.empty()){
            road_t=road_t_q.top(); road_t_q.pop();
            u=road_t.to;
            if(u==car_road[car_n][1]){
                break;
            }
            if(check[u]==0){
                for(int i=0; i<data->g[u].size(); i++){
                    int v=data->g[u][i].to; double h;
                    if(check[v]==0){
                        if(roadtotal[u]<roadtotal[v]-data->g[u][i].len){
                            roadtotal[v]=roadtotal[u]+data->g[u][i].len;
                            h=sqrt(pow((v_xy[v][0]-v_xy[car_road[car_n][1]][0]), 2)+pow((v_xy[v][1]-v_xy[car_road[car_n][1]][1]), 2));
                            road_t_q.push(edge(v, roadtotal[v]+h+traffic[u][v]));
                            link[v]=u;
                        }
                    }
                }
                check[u]=1;
            }
        }
        ClearQueue(road_t_q);

        double car_roadtotal;    int data_link[V];
        car_roadtotal=roadtotal[car_road[car_n][1]];
        for(int i=0;i<V;i++){
            data_link[i]=-1;
        }
        data_link[0]=car_road[car_n][1];
        int linking=V;
        for(int i=1;i<V;i++){
            data_link[i]=link[data_link[i-1]];
            if(data_link[i]==car_road[car_n][0]){
                linking=i+1;
                break;
            }
        }
        int car_link[linking];
        for(int i=0;i<linking;i++){
            car_link[linking-i-1]=data_link[i];
        }
        printf("차%d의 거리:%.3f\n차%d의 이동경로:", (car_n+1), car_roadtotal/speed[car_n], (car_n+1));
        for(int i=0;i<linking;i++){
            printf("%d ", car_link[i]);
        }
        printf("\n");
    }
}

